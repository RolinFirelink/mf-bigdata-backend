<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.arg.smart.oauth.mapper.SsoUserMapper">
    <sql id="byAccount">
        (1!=1
        <if test="account != null and account != ''">
            or account = #{account}
            or phone = #{account}
            or email = #{account}
        </if>
        )
    </sql>
    <select id="getUserByAccount" resultType="com.arg.smart.oauth.entity.SsoUser">
        select * from sso_user
        <where>
            <include refid="byAccount"/>
        </where>
    </select>
    <select id="getUserRoles" resultType="com.arg.smart.common.oauth.api.entity.UserRole">
        select r.id, r.role_name, r.role_code
        from sso_user u
        inner join sso_user_role ur on ur.user_id = u.id
        inner join sso_role r on r.id = ur.role_id
        <where>
            r.status = 0 and r.del_flag = 0 and u.id = #{userId}
            <if test="clientId!= null and clientId != ''">
                and r.client_id = #{clientId}
            </if>
        </where>
    </select>
    <select id="getUserPermissions" resultType="java.lang.String">
        select GROUP_CONCAT(m.permissions) permissions
        from sso_user u
        inner join sso_user_role ur on ur.user_id = u.id
        inner join sso_role r on r.id = ur.role_id
        inner join sso_role_menu rm on rm.role_id = ur.role_id
        inner join sso_menu m on rm.menu_id = m.id
        <where>
            u.id = #{userId}
            and m.permissions is not null
            and m.permissions != ''
            <if test="clientId!= null and clientId != ''">
                and r.client_id = #{clientId}
            </if>
        </where>
        order by permissions
    </select>
    <select id="isAccountExist" resultType="java.lang.Integer">
        select count(0) from sso_user
        <where>
            <include refid="byAccount"/>
            <if test="userId != null and userId != ''">
                and id != #{userId}
            </if>
                and del_flag = 0
        </where>
    </select>
    <resultMap id="userMap" type="com.arg.smart.common.oauth.api.entity.UserInfo">
        <result property="roleIds" column="roleIds"
                typeHandler="com.arg.smart.oauth.handler.StrToListTypeHandler"></result>
    </resultMap>
    <select id="getUserList" resultMap="userMap">
        select u.*,o.org_name,ou.org_id,GROUP_CONCAT(ur.role_id) roleIds from sso_user u
        left join sso_client_user cu on cu.user_id = u.id
        left join sso_org_user ou on ou.user_id = u.id
        left join sso_org o on o.id = ou.org_id
        left join sso_user_role ur on u.id = ur.user_id
        <where>
            u.del_flag = 0
            <if test="orgId != null and orgId != ''">
                and o.id = #{orgId}
            </if>
            <if test="phone != null and phone != ''">
                and u.phone like concat('%',#{phone},'%')
            </if>
            <if test="account != null and account != ''">
                and u.account like concat('%',#{account},'%')
            </if>
            <if test="nickname != null and nickname != ''">
                and u.nickname like concat('%',#{nickname},'%')
            </if>
            <if test="status != null">
                and u.status = #{status}
            </if>
            <if test="clientId != null and clientId !=''">
                and cu.client_id = #{clientId}
            </if>
        </where>
        group by u.id
        order by u.create_time desc
    </select>

    <insert id="insertUserRole">
        insert into sso_user_role(role_id, user_id) values
        <foreach collection="roles" item="role" separator=",">
            (#{role},#{userId})
        </foreach>
    </insert>
    <insert id="insertUserOrg">
        insert into sso_org_user(org_id, user_id) values
        <foreach collection="orgList" item="org" separator=",">
            (#{org},#{userId})
        </foreach>
    </insert>
    <insert id="insertUserClient">
        insert into sso_client_user(client_id, user_id) values
        <foreach collection="clientList" item="client" separator=",">
            (#{client},#{userId})
        </foreach>
    </insert>
</mapper>